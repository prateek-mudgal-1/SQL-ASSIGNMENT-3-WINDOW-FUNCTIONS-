use mavenmovies;
-- question 1) **Rank the customers based on the total amount they've spent on rentals.**
-- solution 1)
SELECT c.customer_id, c.first_name, c.last_name, 
SUM(p.amount) AS total_amount_spent,RANK() OVER (ORDER BY SUM(p.amount) DESC) AS rank1
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id
ORDER BY total_amount_spent DESC;

-- question 2) **Calculate the cumulative revenue generated by each film over time.**
-- solution 2)
select film.title,payment.payment_date ,sum(payment.amount) over(partition by film.film_id order by payment.payment_date)  as revenue from film
inner join inventory on film.film_id=inventory.film_id 
inner join rental on rental.inventory_id=inventory.inventory_id inner join payment on payment.rental_id=rental.rental_id order by
film.title,payment.payment_date;

-- question 3) **Determine the average rental duration for each film, considering films with similar lengths.**
-- solution 3)
select title,avg(rental_duration) over(partition by length) from film;
-- question 4) Identify the top 3 films in each category based on their rental counts.**
-- solution 4)
SELECT 
    film_id,title,category,rental_count
FROM (
SELECT f.film_id,f.title,c.name AS category,
COUNT(r.rental_id) AS rental_count,
DENSE_RANK() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS rank1
FROM film f JOIN inventory i ON f.film_id = i.film_id JOIN rental r ON i.inventory_id = r.inventory_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id GROUP BY film_id, f.title, c.name) AS ranked_films
WHERE rank1 <= 3
ORDER BY category, rank1;

-- question 5) **Calculate the difference in rental counts between each customer's total rentals and the average rentals 
-- across all customers.**
-- solution 5)
SELECT c.customer_id,c.first_name,c.last_name,
COUNT(r.rental_id) AS total_rentals,
AVG(COUNT(r.rental_id)) OVER () AS average_rentals,
COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER () AS rental_difference
FROM customer c JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY rental_difference DESC;
-- question 6) **Find the monthly revenue trend for the entire rental store over time.**
-- solution 6)
SELECT DATE_FORMAT(p.payment_date, '%Y-%m') AS month,SUM(p.amount) AS total_revenue
FROM payment p
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY DATE_FORMAT(p.payment_date, '%Y-%m');

-- question 7) **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
-- solution 7)
select first_name,last_name ,sum(payment.amount)as amount,rank() over(order by sum(payment.amount) desc) as top from customer inner join payment on customer.customer_id=payment.customer_id 
group by customer.customer_id order by top limit 120;

-- question 8) **Calculate the running total of rentals per category, ordered by rental count.**
-- solution 8)
WITH CategoryRentalCounts AS (
SELECT c.name AS category,COUNT(r.rental_id) AS rental_count
FROM category c JOIN film_category fc ON c.category_id = fc.category_id
JOIN inventory i ON fc.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.name
)
SELECT category,rental_count,
SUM(rental_count) OVER (ORDER BY rental_count) AS running_total
FROM CategoryRentalCounts
ORDER BY rental_count;

-- question 9)**Find the films that have been rented less than the average rental count for their respective categories.**
-- solution 9)
WITH FilmRentalCounts AS (
SELECT f.film_id,f.title,c.name AS category,COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY f.film_id, f.title, c.name
),
CategoryAverage AS (
SELECT category,
AVG(rental_count) AS avg_rental_count
FROM FilmRentalCounts
GROUP BY category
)
SELECT fr.film_id,fr.title,fr.category,fr.rental_count,ca.avg_rental_count
FROM FilmRentalCounts fr
JOIN CategoryAverage ca ON fr.category = ca.category
WHERE fr.rental_count < ca.avg_rental_count
ORDER BY fr.category, fr.rental_count;

-- question 10)**Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
select distinct(month(payment.payment_date)),sum(payment.amount)
over(partition by month(payment.payment_date)) as revenue from payment order by revenue desc; 
